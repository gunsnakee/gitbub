package com.dmdelivery.webservice;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * This class was generated by Apache CXF 2.7.10
 * 2014-03-06T09:59:26.440+08:00
 * Generated source version: 2.7.10
 * 
 */
@WebService(targetNamespace = "http://dmdelivery.com/webservice/", name = "DMdeliverySoapAPIPort")
@XmlSeeAlso({ObjectFactory.class})
@SOAPBinding(style = SOAPBinding.Style.RPC)
public interface DMdeliverySoapAPIPort {

    /**
     * Bulk-send an SMS. 
     * 		Required credentials: access to area 'Send SMS mailing'
     * 		When messages, after personalizing, exceed a length of 160 characters, multiple SMS's are sent.
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.			
     * 		@param mailingID: The database ID of the SMS mailing to send.
     * 		@param isTest: Use true for test batch, false for definitive batch.
     * 		@param resultsEmail: The email address of the person who should receive logfile.
     * 		@param groupIDs: Array of (database IDs of) groups to send the mailing to. Provide at least one group.
     * 		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
     * 		@param lang: An array of languages to send the mailing to. Ex: ('en', 'nl').
     * 		@param callbackUrl: An (optional) url DMdelivery will call after the SMS mailing has been sent.
     * 		       You can use the following variables in this URL, which DMdelivery will replace:
     * 				 - {$DMDcid} The campaign id
     * 				 - {$DMDmid} The SMS mailing id
     * 				 - {$nrRecipients} The number of recipients in the batch
     * 				 - {$nrSent} The number of SMS messages actually sent
     * 		@returns: status 'OK'
     * 		
     */
    @WebResult(name = "sendMailing_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "sendMailing_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType sendSMS(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailingID", name = "mailingID")
            int mailingID,
            @WebParam(partName = "isTest", name = "isTest")
            boolean isTest,
            @WebParam(partName = "resultsEmail", name = "resultsEmail")
            String resultsEmail,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs,
            @WebParam(partName = "filterID", name = "filterID")
            int filterID,
            @WebParam(partName = "lang", name = "lang")
            ArrayOfStringType lang,
            @WebParam(partName = "ADprefixDomains", name = "ADprefixDomains")
            String aDprefixDomains,
            @WebParam(partName = "callbackUrl", name = "callbackUrl")
            String callbackUrl
    );

    /**
     * Move all recipients from one group to another group.
     * 		Required credentials: access to area 'Groups'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.			
     * 		@param fromGroupID: The database ID of the source group.
     * 		@param toGroupID: The database ID of the target group.
     * 		@returns: The number of recipients that were moved to the target group.
     * 		
     */
    @WebResult(name = "moveRecipientsToGroup_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "moveRecipientsToGroup_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public int moveRecipientsToGroup(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "fromGroupID", name = "fromGroupID")
            int fromGroupID,
            @WebParam(partName = "toGroupID", name = "toGroupID")
            int toGroupID
    );

    /**
     * Flush all recipients from a recipient group, keep the group.
     * 		The recipients are 'disconnected' from the group, not physically deleted.
     * 		Afterwards, the group will still exist, but contains no recipients anymore.
     * 		Required credentials: 'delete' privilege for area 'Groups'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param groupID: The database ID of the group to delete.
     * 		@returns: Number of recipients actually flushed.
     * 		
     */
    @WebResult(name = "flushGroup_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "flushGroup_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public int flushGroup(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "groupID", name = "groupID")
            int groupID
    );

    /**
     * Retrieve all groups from a DMdelivery campaign.
     * 		Required credentials: 'export' privilege for area 'Groups'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@returns: An array of all groups in the campaign.
     * 		
     */
    @WebResult(name = "getGroups_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getGroups_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public GroupArrayType getGroups(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID
    );

    /**
     * Retrieve recipients from a DMdelivery campaign.
     * 		Required credentials: 'export' privilege for area 'Recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param fields: Array of fields to retrieve. Ex: ('email', 'firstname', 'lastname'). Provide at least one field.
     * 		@param inGroupIDs: Array of (database IDs of) groups the recipients should be member of. May be empty.
     * 		@param notInGroupIDs: Array of (database IDs of) groups the recipients should *not* be member of. May be empty.
     * 		@param mailingIDs: Array of (database IDs of) mailings the recipients must have been sent. May be empty.
     * 		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
     * 		@returns: An array of recipients.
     * 		
     */
    @WebResult(name = "getRecipients_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getRecipients_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecipientArrayType getRecipients(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "fields", name = "fields")
            ArrayOfStringType fields,
            @WebParam(partName = "inGroupIDs", name = "inGroupIDs")
            ArrayOfIntType inGroupIDs,
            @WebParam(partName = "notInGroupIDs", name = "notInGroupIDs")
            ArrayOfIntType notInGroupIDs,
            @WebParam(partName = "mailingIDs", name = "mailingIDs")
            ArrayOfIntType mailingIDs,
            @WebParam(partName = "filterID", name = "filterID")
            int filterID
    );

    /**
     * Retrieve recipients that match certain criteria, including their database ID.
     * 		Required credentials: 'export' privilege for area 'Recipients'
     * 		@param login: DMdelivery login object.
     * 		@param recipientMatchData: An array of name/value pairs that represent criteria to match recipients by. Ex: (('name'=>'email', 'value'=>'user@example.com'),('name'=>'firstname', 'value'=>'John')). Wildcards '*' and '?' can be used as well.
     * 		@returns: An array of recipients that match the criteria.
     * 		
     */
    @WebResult(name = "getRecipientsByMatch_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getRecipientsByMatch_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecipientArrayType getRecipientsByMatch(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "recipientData", name = "recipientData")
            NewRecipientType recipientData
    );

    /**
     * Remove an overall recipient from one or more groups in one or more overall campaigns.
     * 		Required credentials: 'delete' privilege for area 'Overall recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignIDs: An array of overall campaigns (database IDs).
     * 		@param recipientID: The database ID of the recipient.
     * 		@param groupIDs: An array of groups (database IDs) to remove the recipient from. Provide at least one group.
     * 		@returns: true
     * 		
     */
    @WebResult(name = "removeOverallRecipientFromGroups_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "removeOverallRecipientFromGroups_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public boolean removeOverallRecipientFromGroups(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignIDs", name = "campaignIDs")
            ArrayOfIntType campaignIDs,
            @WebParam(partName = "recipientID", name = "recipientID")
            int recipientID,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs
    );

    /**
     * Retrieve summarized statistics for a mailing sent. Mailing must be sent in order to be able to do this.
     * 		Required credentials: access to area 'Statistics'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param mailingID: The database ID of the mailing to fetch the summary for.
     * 		@returns: An array containing summary stats info (sent, bounces, unsubscribers, opens, clicks, conversion etc).
     * 		
     */
    @WebResult(name = "getMailingStatsSummary_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getMailingStatsSummary_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public MailingStatsSummaryResultType getMailingStatsSummary(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailing", name = "mailing")
            int mailing
    );

    /**
     * Retrieve all SMS mailings from a DMdelivery campaign. Mailings are returned from new to old (newest on top).
     * 		Required credentials: 'export' privilege for area 'SMS mailings'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param limit: indicates the number of SMS mailings to retrieve. Use 0 to retrieve *all* mailings.
     * 		@param definitiveOnly: Whether or not to only return definitively sent SMS mailings.
     * 		@returns: An array of all SMS mailings in the campaign.
     * 		
     */
    @WebResult(name = "getSMSMailings_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getSMSMailings_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public SMSMailingArrayType getSMSMailings(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "limit", name = "limit")
            int limit,
            @WebParam(partName = "definitiveOnly", name = "definitiveOnly")
            boolean definitiveOnly
    );

    /**
     * Import recipients (max 1000 at once), while sending a (definitive) SMS to them.
     * 		Required credentials: 'insert' privilege for area 'Recipients' AND access to area 'Send mailing'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param SMSmailingID: The database ID of the SMS mailing to send.
     * 		@param groupIDs: An array of groups (database IDs) to make the recipients a member of. Provide at least one group.
     * 		@param recipientDatas: An array of associative arrays (key: name of field, value: value of field) containing recipient data.
     * 		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
     * 		@param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
     * 		@returns: Complex datatype, containing all duplicates and/or errors.
     * 		
     */
    @WebResult(name = "addRecipientsSendSMS_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "addRecipientsSendSMS_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public AddRecipientsResultType addRecipientsSendSMS(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "SMSmailingID", name = "SMSmailingID")
            int smSmailingID,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs,
            @WebParam(partName = "recipientDatas", name = "recipientDatas")
            NewRecipientArrayType recipientDatas,
            @WebParam(partName = "addDuplisToGroups", name = "addDuplisToGroups")
            boolean addDuplisToGroups,
            @WebParam(partName = "overwrite", name = "overwrite")
            boolean overwrite
    );

    /**
     * Retrieve all campaigns from DMdelivery.
     * 		Required credentials: 'export' privilege for area 'Campaigns'
     * 		@param login: DMdelivery login object.
     * 		@returns: An array of all campaigns in the DMdelivery environment.
     * 		
     */
    @WebResult(name = "getCampaigns_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getCampaigns_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public CampaignArrayType getCampaigns(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login
    );

    /**
     * Edit the data of an existing overall recipient, enabling modifying campaign and/or group memberships.
     * 		Required credentials: 'update' privilege for area 'Overall recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignIDs: An array of overall campaigns (database IDs) to make the recipients a member of. For campaigns this recipient was a member of but that are not included in $campaignIDs, the recipient will be put in the Unsubscribers group. For all 'campaignIDs' given, the recipient will be put in the 'groupIDs', while removing that recipient from the Unsubscribe, Bounce and Spamcomplaint groups in these campaigns. If this argument is an empty list, the recipient will be unsubscribed from all campaigns he is a member of.
     * 		@param recipientID: The database ID of the recipient to edit. Can be found via getRecipientsByMatch.
     * 		@param groupIDs: An array of groups (database IDs) to make the recipient a member of. The groups here need to be present in all campaigns the recipient becomes a member of! Provide at least one group.
     * 		@param recipientData: An associative array (key: name of field, value: value of field) containing updated recipient data.
     * 		@returns: The database ID of the updated recipient.
     * 		
     */
    @WebResult(name = "editOverallRecipient_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "editOverallRecipient_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType editOverallRecipient(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignIDs", name = "campaignIDs")
            ArrayOfIntType campaignIDs,
            @WebParam(partName = "recipientID", name = "recipientID")
            int recipientID,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs,
            @WebParam(partName = "recipientData", name = "recipientData")
            NewRecipientType recipientData
    );

    /**
     * Retrieve all mailings from a DMdelivery campaign. Mailings are returned from new to old (newest on top).
     * 		Required credentials: 'export' privilege for area 'Mailings'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.			
     * 		@param limit: indicates the number of mailings to retrieve. Use 0 to retrieve *all* mailings.
     * 		@param definitiveOnly: Whether or not to only return definitively sent mailings.
     * 		@returns: An array of all mailings in the campaign.
     * 		
     */
    @WebResult(name = "getMailings_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getMailings_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public MailingArrayType getMailings(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "limit", name = "limit")
            int limit,
            @WebParam(partName = "definitiveOnly", name = "definitiveOnly")
            boolean definitiveOnly
    );

    /**
     * Delete a mailing from a campaign.
     * 		Required credentials: 'delete' privilege for area 'Mailings'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param mailingID: The database ID of the mailing to delete.
     * 		@returns: 'OK' or 'ERROR'
     * 		
     */
    @WebResult(name = "deleteMailing_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "deleteMailing_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType deleteMailing(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailingID", name = "mailingID")
            int mailingID
    );

    /**
     * Import a remotely located CSV file, containing recipient info, into DMdelivery.
     * 		Supports http, https, ftp, sftp, ftps and scp protocols.
     * 		Required credentials: 'import' privilege for area 'Recipients'
     * 		Errors and Duplicates are uploaded back to the same location the CSV was downloaded from.
     * 		For example, if this is the CSV file:
     * 		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv
     * 		Then errors and duplicates will be available here when the import has finished:
     * 		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.errors
     * 		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.duplis
     * 		The 'callback' argument is used to let you know when the import is finished. 
     * 		This can be an email address: An email is sent to this address when import is finished.
     * 		This can be a URL: The URL is fetched when import is finished. The URL may contain the following
     * 		   placeholders: {$DMDcid}, {$nrLines}, {$nrDuplicates} and {$nrErrors}
     * 		
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param groupID: The ID of the group to import the recipients into.
     * 		@param csvURL: The URL of the CSV file. Examples:
     * 		- http://username:password@somewhere.server.com:80/recipients.csv
     * 		- ftp://username:password@somewhere.server.com/incoming/recipients.csv
     * 		- sftp://username:password@somewhere.server.com/root/csvs/recipients.csv
     * 		@param csvCharset: The character set of the CSV file. For example: utf-8, iso-8859-1, gb2312
     * 		@param csvFieldSep: The field separator character used in the CSV file. 
     * 		@param csvEnclosure: The enclosure character used in the CSV file.
     * 		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
     * 		@param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
     * 		@param callback: Either an email address or a URL. Will be emailed/called when import is done.
     * 		@returns: 'OK', when remote file could be found or 'ERROR' if not.
     * 		
     */
    @WebResult(name = "importRemoteCSV_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "importRemoteCSV_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType importRemoteCSV(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "groupID", name = "groupID")
            int groupID,
            @WebParam(partName = "csvURL", name = "csvURL")
            String csvURL,
            @WebParam(partName = "csvCharset", name = "csvCharset")
            String csvCharset,
            @WebParam(partName = "csvFieldSep", name = "csvFieldSep")
            String csvFieldSep,
            @WebParam(partName = "csvEnclosure", name = "csvEnclosure")
            String csvEnclosure,
            @WebParam(partName = "addDuplisToGroups", name = "addDuplisToGroups")
            boolean addDuplisToGroups,
            @WebParam(partName = "overwrite", name = "overwrite")
            boolean overwrite,
            @WebParam(partName = "callback", name = "callback")
            String callback
    );

    /**
     * Bulk-send a mailing.
     * 		Required credentials: access to area 'Send mailing'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.		
     * 		@param mailingID: The database ID of the mailing to send.
     * 		@param isTest: Use true for test batch, false for definitive batch.
     * 		@param resultsEmail: The email address of the person who should receive logfile.
     * 		@param groupIDs: Array of (database IDs of) groups to send the mailing to. Provide at least one group.
     * 		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
     * 		@param lang: An array of languages to send the mailing to. Ex: ('en', 'nl').
     * 		@param ADprefixDomains: Optional and for China only: A comma-separated string of domains that need an (AD) prefix. For example: *163.com,*126.com,yeah.net,188.com.
     * 		@param callbackUrl: An (optional) url DMdelivery will call after the mailing has been sent.
     * 		       You can use the following variables in this URL, which DMdelivery will replace:
     * 				 - {$DMDcid} The campaign id
     * 				 - {$DMDmid} The mailing id
     * 				 - {$nrRecipients} The number of recipients in the batch
     * 				 - {$nrSent} The number of emails actually sent
     * 		@returns: status 'OK'
     * 		
     */
    @WebResult(name = "sendMailing_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "sendMailing_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType sendMailing(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailingID", name = "mailingID")
            int mailingID,
            @WebParam(partName = "isTest", name = "isTest")
            boolean isTest,
            @WebParam(partName = "resultsEmail", name = "resultsEmail")
            String resultsEmail,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs,
            @WebParam(partName = "filterID", name = "filterID")
            int filterID,
            @WebParam(partName = "lang", name = "lang")
            ArrayOfStringType lang,
            @WebParam(partName = "ADprefixDomains", name = "ADprefixDomains")
            String aDprefixDomains,
            @WebParam(partName = "callbackUrl", name = "callbackUrl")
            String callbackUrl
    );

    /**
     * Check the health of DMdelivery's webservice.
     * 		Specifically: check whether the webservice is available (http(s) access), and the database is up and responsive.
     * 		Required credentials: none
     * 		@param login: DMdelivery login object.
     * 		@returns: true, when health is okay.
     * 		
     */
    @WebResult(name = "checkHealth_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "checkHealth_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public boolean checkHealth(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login
    );

    /**
     * Flush all recipients from a recipient group, then delete the group.
     * 		The recipients are 'disconnected' from the group, not physically deleted.
     * 		Afterwards, the group will no longer exist.
     * 		Required credentials: 'delete' privilege for area 'Groups'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param groupID: The database ID of the group to delete.
     * 		@returns: Number of groups (0 or 1) actually deleted.
     * 		
     */
    @WebResult(name = "deleteGroup_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "deleteGroup_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public int deleteGroup(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "groupID", name = "groupID")
            int groupID
    );

    /**
     * Create a mailing from scratch, providing raw HTML.
     * 		The plaintext-message is inherited from the campaign's default plaintext message.
     * 		Required credentials: 'insert' privilege for area 'Mailings'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.			
     * 		@param mailingName: The name to store the mailing as (must be unique!).
     * 		@param lang: The ISO-lang code for the mailing. Ex: 'nl', 'en', etc.
     * 		@param subject: The default subject of the mailing. Can be overwritten in the HTML to fetch.
     * 		@param fromName: The from name.
     * 		@param senderID: The database ID of the sender address. Use 0 for campaign's default sender address.
     * 		@param html: The mailing's HTML. 
     * 		@returns: The database ID of the mailing that was created.
     * 		
     */
    @WebResult(name = "createMailing_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "createMailing_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType createMailing(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailingName", name = "mailingName")
            String mailingName,
            @WebParam(partName = "lang", name = "lang")
            String lang,
            @WebParam(partName = "subject", name = "subject")
            String subject,
            @WebParam(partName = "fromName", name = "fromName")
            String fromName,
            @WebParam(partName = "senderID", name = "senderID")
            int senderID,
            @WebParam(partName = "html", name = "html")
            String html
    );

    /**
     * Retrieve recipient fields for a DMdelivery campaign.
     * 		Required credentials: access to area 'Define fields'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with. Use 0 to retrieve fields in the overall database.
     * 		@param lang: The language to retrieve fields in.
     * 		@returns: An array of all recipient fields defined for the campaign.
     * 		
     */
    @WebResult(name = "getRecipientFields_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getRecipientFields_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecipientFieldArrayType getRecipientFields(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "lang", name = "lang")
            String lang
    );

    /**
     * Add or update an attendee for a specified event
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param eventID: The eventID of the event the attendee should be added to.
     * 		@param status: Boolean flag to set weather the given attendee is attending the event.
     * 		@returns: Returns original attendee data with extra fields eventResponse and eventMessage.
     * 		
     */
    @WebResult(name = "addEventAttendee_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "addEventAttendee_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public NewRecipientType addEventAttendee(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "eventID", name = "eventID")
            int eventID,
            @WebParam(partName = "recipientData", name = "recipientData")
            NewRecipientType recipientData,
            @WebParam(partName = "status", name = "status")
            boolean status
    );

    /**
     * Remove a recipient from one or more groups.
     * 		Required credentials: 'update' privilege for area 'Recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.			
     * 		@param recipientID: The database ID of the recipient. Can be found via getRecipientsByMatch.
     * 		@param groupIDs: The (database ID of) the groups to remove the recipient from. Provide at least one group.
     * 		@returns: An array of groups (database IDs) the recipient is now a member of.
     * 		
     */
    @WebResult(name = "removeRecipientFromGroups_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "removeRecipientFromGroups_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public ArrayOfIntType removeRecipientFromGroups(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "recipientID", name = "recipientID")
            int recipientID,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs
    );

    /**
     * Retrieve all campaigns an overall recipient is member of, and the groups they're member of within those campaigns.
     * 		Required credentials: access to area 'Overall recipients'
     * 		@param login: DMdelivery login object.
     * 		@param recipientID: The database ID of the overall recipient. Can be found via getRecipientsByMatch.
     * 		@returns: An array of campaigns (and groups) the recipient is member of.
     * 		
     */
    @WebResult(name = "getOverallRecipientCampaigns_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getOverallRecipientCampaigns_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecipientCampaignArrayType getOverallRecipientCampaigns(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "recipientID", name = "recipientID")
            int recipientID
    );

    /**
     * Add a new group to this DMdelivery campaign.
     * 		Required credentials: 'insert' privilege for area 'Groups'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param group: The characteristics of the group to add.
     * 		@returns: The database ID of the newly created group.
     * 		
     */
    @WebResult(name = "addGroup_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "addGroup_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType addGroup(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "group", name = "group")
            NewGroupType group
    );

    /**
     * Retrieve all brands from DMdelivery.
     * 		Required credentials: 'export' privilege for area 'Brands'
     * 		@param login: DMdelivery login object.
     * 		@returns: An array of all brands in the DMdelivery environment.
     * 		
     */
    @WebResult(name = "getBrands_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getBrands_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public BrandArrayType getBrands(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login
    );

    /**
     * Get all attendees for an event
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param eventID: The eventID of the event the attendee should be added to.
     * 		@returns: Multidimensional array with recipient data formatted as name/value pairs.
     * 		
     */
    @WebResult(name = "getEventAttendees_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getEventAttendees_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public NewRecipientArrayType getEventAttendees(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "eventID", name = "eventID")
            int eventID
    );

    /**
     * Import a remotely located CSV file, containing recipient info, into DMdelivery.
     * 		Send a mailing to this group (optionally applying filter/language) when import is finished.
     * 		Supports http, https, ftp, sftp, ftps and scp protocols.
     * 		Required credentials: 'import' privilege for area 'Recipients' and access to area 'Send mailing'
     * 		Errors and Duplicates are uploaded back to the same location the CSV was downloaded from.
     * 		For example, if this is the CSV file:
     * 		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv
     * 		Then errors and duplicates will be available here when the import has finished:
     * 		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.errors
     * 		- ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.duplis
     * 		
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param groupID: The ID of the group to import the recipients into.
     * 		@param csvURL: The URL of the CSV file. Examples:
     * 		- http://username:password@somewhere.server.com:80/recipients.csv
     * 		- ftp://username:password@somewhere.server.com/incoming/recipients.csv
     * 		- sftp://username:password@somewhere.server.com/root/csvs/recipients.csv
     * 		@param csvCharset: The character set of the CSV file. For example: utf-8, iso-8859-1, gb2312
     * 		@param csvFieldSep: The field separator character used in the CSV file. 
     * 		@param csvEnclosure: The enclosure character used in the CSV file.
     * 		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
     * 		@param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
     * 		@param mailingID: The database ID of the mailing to send.
     * 		@param resultsEmail: The email address of the person who should receive logfile.
     * 		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
     * 		@param langs: An array of languages to send the mailing to. Ex: ('en', 'nl').
     * 		@param ADprefixDomains: Optional and for China only: A comma-separated string of domains that need an (AD) prefix. For example: *163.com,*126.com,yeah.net,188.com.
     * 		@param callbackUrl: An (optional) url DMdelivery will call after the mailing has been sent.
     * 		       You can use the following variables in this URL, which DMdelivery will replace:
     * 				 - {$DMDcid} The campaign id
     * 				 - {$DMDmid} The mailing id
     * 				 - {$nrRecipients} The number of recipients in the batch
     * 				 - {$nrSent} The number of emails actually sent
     * 		@returns: status 'OK'
     * 		
     */
    @WebResult(name = "importRemoteCSVSendMailing_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "importRemoteCSVSendMailing_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType importRemoteCSVSendMailing(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "groupID", name = "groupID")
            int groupID,
            @WebParam(partName = "csvURL", name = "csvURL")
            String csvURL,
            @WebParam(partName = "csvCharset", name = "csvCharset")
            String csvCharset,
            @WebParam(partName = "csvFieldSep", name = "csvFieldSep")
            String csvFieldSep,
            @WebParam(partName = "csvEnclosure", name = "csvEnclosure")
            String csvEnclosure,
            @WebParam(partName = "addDuplisToGroups", name = "addDuplisToGroups")
            boolean addDuplisToGroups,
            @WebParam(partName = "overwrite", name = "overwrite")
            boolean overwrite,
            @WebParam(partName = "mailingID", name = "mailingID")
            int mailingID,
            @WebParam(partName = "resultsEmail", name = "resultsEmail")
            String resultsEmail,
            @WebParam(partName = "filterID", name = "filterID")
            int filterID,
            @WebParam(partName = "langs", name = "langs")
            ArrayOfStringType langs,
            @WebParam(partName = "ADprefixDomains", name = "ADprefixDomains")
            String aDprefixDomains,
            @WebParam(partName = "callbackUrl", name = "callbackUrl")
            String callbackUrl
    );

    /**
     * Import recipients (max 1000 at once), while sending a (definitive) mailing to them.
     * 		Required credentials: 'insert' privilege for area 'Recipients' AND access to area 'Send mailing'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param mailingID: The database ID of the mailing to send.
     * 		@param groupIDs: An array of groups (database IDs) to make the recipients a member of. Provide at least one group.
     * 		@param recipientDatas: An array of associative arrays (key: name of field, value: value of field) containing recipient data.
     * 		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
     * 		@param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
     * 		@returns: Complex datatype, containing all duplicates and/or errors.
     * 		
     */
    @WebResult(name = "addRecipientsSendMailing_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "addRecipientsSendMailing_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public AddRecipientsResultType addRecipientsSendMailing(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailingID", name = "mailingID")
            int mailingID,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs,
            @WebParam(partName = "recipientDatas", name = "recipientDatas")
            NewRecipientArrayType recipientDatas,
            @WebParam(partName = "addDuplisToGroups", name = "addDuplisToGroups")
            boolean addDuplisToGroups,
            @WebParam(partName = "overwrite", name = "overwrite")
            boolean overwrite
    );

    /**
     * Get all events for a specified campaign
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param eventID: Optional eventID parameter
     * 		@returns: Complex datatype, containing all duplicates and/or errors.
     * 		
     */
    @WebResult(name = "getEvents_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getEvents_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public EventArrayType getEvents(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "eventID", name = "eventID")
            int eventID
    );

    /**
     * Add multiple new recipients to DMdelivery (max 1000 at once).
     * 		Required credentials: 'insert' privilege for area 'Recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param groupIDs: An array of groups (database IDs) to make the recipients a member of. Provide at least one group.
     * 		@param recipientDatas: An array of associative arrays (key: name of field, value: value of field) containing recipient data.
     * 		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
     * 		@param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
     * 		@returns: Complex datatype, containing all successfully inserted records (including the ID assigned by DMdelivery), duplicates and/or errors.
     * 		
     */
    @WebResult(name = "addRecipients_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "addRecipients_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public AddRecipientsResultType addRecipients(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs,
            @WebParam(partName = "recipientDatas", name = "recipientDatas")
            NewRecipientArrayType recipientDatas,
            @WebParam(partName = "addDuplisToGroups", name = "addDuplisToGroups")
            boolean addDuplisToGroups,
            @WebParam(partName = "overwrite", name = "overwrite")
            boolean overwrite
    );

    /**
     * Bulk-send a mailing at a later date/time, optionally using approval procedure.
     * 		Required credentials: access to area 'Send mailing'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.		
     * 		@param mailingID: The database ID of the mailing to send.
     * 		@param sendDate: The date/time to send the mailing at. You can only schedule @ :03, :18, :33, :48
     * 		@param isTest: Use true for test batch, false for definitive batch.
     * 		@param resultsEmail: The email address of the person who should receive logfile.
     * 		@param groupIDs: Array of (database IDs of) groups to send the mailing to. Provide at least one group.
     * 		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
     * 		@param lang: An array of languages to send the mailing to. Ex: ('en', 'nl').
     * 		@param ADprefixDomains: Optional and for China only: A comma-separated string of domains that need an (AD) prefix. For example: *163.com,*126.com,yeah.net,188.com.
     * 		@param callbackUrl: An (optional) url DMdelivery will call after the mailing has been sent.
     * 		       You can use the following variables in this URL, which DMdelivery will replace:
     * 				 - {$DMDcid} The campaign id
     * 				 - {$DMDmid} The mailing id
     * 				 - {$nrRecipients} The number of recipients in the batch
     * 				 - {$nrSent} The number of emails actually sent
     * 		@param approvalDMDgid: Approval group id. Provide this argument to use approval module.
     * 		@param approvalPeriod: How many hours to wait between approval sendout and definitive sendout.
     * 		@param approvalAck: At least X people must approve the mailing.
     * 		@param $approvalNack: At most X people may disapprove the mailing.
     * 		@returns: status 'OK'
     * 		
     */
    @WebResult(name = "sendMailing_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "sendMailing_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType sendMailingScheduled(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailingID", name = "mailingID")
            int mailingID,
            @WebParam(partName = "sendDate", name = "sendDate")
            javax.xml.datatype.XMLGregorianCalendar sendDate,
            @WebParam(partName = "isTest", name = "isTest")
            boolean isTest,
            @WebParam(partName = "resultsEmail", name = "resultsEmail")
            String resultsEmail,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs,
            @WebParam(partName = "filterID", name = "filterID")
            int filterID,
            @WebParam(partName = "lang", name = "lang")
            ArrayOfStringType lang,
            @WebParam(partName = "ADprefixDomains", name = "ADprefixDomains")
            String aDprefixDomains,
            @WebParam(partName = "callbackUrl", name = "callbackUrl")
            String callbackUrl,
            @WebParam(partName = "approvalGroupID", name = "approvalGroupID")
            int approvalGroupID,
            @WebParam(partName = "approvalPeriod", name = "approvalPeriod")
            float approvalPeriod,
            @WebParam(partName = "approvalAck", name = "approvalAck")
            int approvalAck,
            @WebParam(partName = "approvalNack", name = "approvalNack")
            int approvalNack
    );

    /**
     * Make a recipient a member of one or more groups.
     * 		Required credentials: 'update' privilege for area 'Recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.			
     * 		@param recipientID: The database ID of the recipient.
     * 		@param groupIDs: An array of groups (database IDs) to make the recipients a member of. Provide at least one group.
     * 		@returns: An array of groups (database IDs) the recipient is now a member of.
     * 		
     */
    @WebResult(name = "addRecipientToGroups_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "addRecipientToGroups_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public ArrayOfIntType addRecipientToGroups(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "recipientID", name = "recipientID")
            int recipientID,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs
    );

    /**
     * Send an SMS message to a single recipient.
     * 		Required credentials: access to area 'Send SMS mailing'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param mailingID: The database ID of the SMS mailing to send.
     * 		@param recipientID: The database ID of the recipient to send to. Can be found via getRecipientsByMatch.
     * 		@returns: true
     * 		
     */
    @WebResult(name = "sendSingleMailing_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "sendSingleMailing_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public boolean sendSingleSMS(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailingID", name = "mailingID")
            int mailingID,
            @WebParam(partName = "recipientID", name = "recipientID")
            int recipientID
    );

    /**
     * Make an overall recipient a member of one or more groups in one or more overall campaigns.
     * 		Required credentials: 'update' privilege for area 'Overall recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignIDs: An array of overall campaigns (database IDs).
     * 		@param recipientID: The database ID of the recipient.
     * 		@param groupIDs: An array of groups (database IDs) to make the recipient a member of. Provide at least one group.
     * 		@returns: true
     * 		
     */
    @WebResult(name = "addOverallRecipientToGroups_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "addOverallRecipientToGroups_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public boolean addOverallRecipientToGroups(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignIDs", name = "campaignIDs")
            ArrayOfIntType campaignIDs,
            @WebParam(partName = "recipientID", name = "recipientID")
            int recipientID,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs
    );

    /**
     * Retrieve the groups a recipient is member of.
     * 		Required credentials: 'export' privilege for area 'Groups'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param recipientID: The database ID of the recipient. Can be found via getRecipientsByMatch.
     * 		@returns: An array with all (database IDs of) groups the recipient is now a member of.
     * 		
     */
    @WebResult(name = "getRecipientGroups_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getRecipientGroups_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public ArrayOfIntType getRecipientGroups(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "recipientID", name = "recipientID")
            int recipientID
    );

    /**
     * Add a new recipient to a DMdelivery campaign.
     * 		Required credentials: 'insert' privilege for area 'Recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param groupIDs: An array of groups (database IDs) to make the recipient a member of. Provide at least one group. If this array *only* contains the ID of the Opt-in group (60), *and* this is a non-existing recipient, the opt-in confirmation email will be sent to the recipient.
     * 		@param recipientData: An associative array (key: name of field, value: value of field) containing recipient data.
     * 		@param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in the database already.
     * 		@param overwrite: In case the recipient already exists, whether or not to overwrite the known recipient data with the new data provided.
     * 		@returns: The database ID of the newly created recipient.
     * 		
     */
    @WebResult(name = "addRecipient_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "addRecipient_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType addRecipient(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs,
            @WebParam(partName = "recipientData", name = "recipientData")
            NewRecipientType recipientData,
            @WebParam(partName = "addDuplisToGroups", name = "addDuplisToGroups")
            boolean addDuplisToGroups,
            @WebParam(partName = "overwrite", name = "overwrite")
            boolean overwrite
    );

    /**
     * Retrieve recipients from a specific DMdelivery group.
     * 		Required credentials: 'export' privilege for area 'Recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param fields: Array of fields to retrieve. Ex: ('email', 'firstname', 'lastname'). Provide at least one field.
     * 		@param inGroupID: Database ID of group the recipients should be member of.
     * 		@param fromDate: Date since when recipient became a member of 'inGroupID'. Leave empty if it doesn't matter, otherwise use 'YYYY-MM-DD' format.
     * 		@param mailingIDs: Array of (database IDs of) mailings the recipients must have been sent. May be empty.
     * 		@param filterID: The database ID of the filter to use for matching recipients. Use 0 for no filter.
     * 		@returns: An array of recipients.
     * 		
     */
    @WebResult(name = "getRecipientsFromGroup_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getRecipientsFromGroup_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecipientArrayType getRecipientsFromGroup(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "fields", name = "fields")
            ArrayOfStringType fields,
            @WebParam(partName = "inGroupID", name = "inGroupID")
            int inGroupID,
            @WebParam(partName = "fromDate", name = "fromDate")
            javax.xml.datatype.XMLGregorianCalendar fromDate,
            @WebParam(partName = "mailingIDs", name = "mailingIDs")
            ArrayOfIntType mailingIDs,
            @WebParam(partName = "filterID", name = "filterID")
            int filterID
    );

    /**
     * Retrieve all sender addresses from DMdelivery.
     * 		Required credentials: 'export' privilege for area 'Sender addresses'
     * 		@param login: DMdelivery login object.
     * 		@returns: An array of all sender addresses in the DMdelivery environment.
     * 		
     */
    @WebResult(name = "getSenderAddresses_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getSenderAddresses_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public SenderAddressArrayType getSenderAddresses(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login
    );

    /**
     * Retrieve the response (what recipients opened/clicked) for a mailing.
     * 		Required credentials: access to area 'Statistics'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param mailingID: The database ID of the mailing to fetch the response for.
     * 		@param types: Either 'click', 'open', 'trigger' or a combination (comma separated), for example 'click,open' or 'click,trigger'.
     * 		@param field: The name of the recipient field to retrieve, for example 'id' or 'email'.
     * 		@returns: An array containing response info (recipient_id, type [open,click,trigger] and log_date).
     * 		
     */
    @WebResult(name = "getMailingResponse_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "getMailingResponse_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public MailingResponseArrayType getMailingResponse(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailingID", name = "mailingID")
            int mailingID,
            @WebParam(partName = "types", name = "types")
            String types,
            @WebParam(partName = "field", name = "field")
            String field
    );

    /**
     * Edit the data of an existing recipient.
     * 		Required credentials: 'update' privilege for area 'Recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with. Use 0 to edit an overall recipient, regardless of campain.
     * 		@param recipientID: The database ID of the recipient to edit. Can be found via getRecipientsByMatch.
     * 		@param recipientData: An array of name/value pairs, representing updated recipient data.
     * 		@returns: The database ID of the updated recipient.
     * 		
     */
    @WebResult(name = "editRecipient_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "editRecipient_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType editRecipient(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "recipientID", name = "recipientID")
            int recipientID,
            @WebParam(partName = "recipientData", name = "recipientData")
            NewRecipientType recipientData
    );

    /**
     * Add a new recipient to the overall DMdelivery database.
     * 		Required credentials: 'insert' privilege for area 'Overall recipients'
     * 		@param login: DMdelivery login object.
     * 		@param campaignIDs: An array of overall campaigns (database IDs) to make the recipients a member of. Provide at least one campaign.
     * 		@param groupIDs: An array of groups (database IDs) to make the recipient a member of. The groups here need to be present in all campaigns the recipient becomes a member of! Provide at least one group. If this array *only* contains the ID of the Opt-in group (60), the opt-in confirmation email will be sent to the recipient.
     * 		@param recipientData: An associative array (key: name of field, value: value of field) containing recipient data.
     * 		@param overwrite: In case the recipient already exists, whether or not to overwrite the known recipient data with the new data provided. If set to 'false', and the recipient to be added turns out to be duplicate, then the recipient will not be added to the given campaigns and groups!
     * 		@returns: The database ID of the newly created recipient.
     * 		
     */
    @WebResult(name = "addOverallRecipient_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "addOverallRecipient_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType addOverallRecipient(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignIDs", name = "campaignIDs")
            ArrayOfIntType campaignIDs,
            @WebParam(partName = "groupIDs", name = "groupIDs")
            ArrayOfIntType groupIDs,
            @WebParam(partName = "recipientData", name = "recipientData")
            NewRecipientType recipientData,
            @WebParam(partName = "overwrite", name = "overwrite")
            boolean overwrite
    );

    /**
     * Create a mailing from a URL.
     * 		Required credentials: 'insert' privilege for area 'Mailings'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.			
     * 		@param mailingName: The name to store the mailing as (must be unique!).
     * 		@param lang: The ISO-lang code for the mailing. Ex: 'nl', 'en', etc.
     * 		@param subject: The default subject of the mailing. Can be overwritten in the HTML to fetch.
     * 		@param fromName: The from name.
     * 		@param senderID: The database ID of the sender address. Use 0 for campaign's default sender address.
     * 		@param url: The url where the mailing HTML (or a ZIP file) can be fetched from.
     * 		@param checkTimestamp: Whether or not to check the HTML for a <!--DMdeliveryTimestamp--> tag. Ignored for ZIP files.
     * 		@returns: The database ID of the mailing that was created.
     * 		
     */
    @WebResult(name = "slurpMailing_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "slurpMailing_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public RecordResultType slurpMailing(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailingName", name = "mailingName")
            String mailingName,
            @WebParam(partName = "lang", name = "lang")
            String lang,
            @WebParam(partName = "subject", name = "subject")
            String subject,
            @WebParam(partName = "fromName", name = "fromName")
            String fromName,
            @WebParam(partName = "senderID", name = "senderID")
            int senderID,
            @WebParam(partName = "url", name = "url")
            String url,
            @WebParam(partName = "checkTimestamp", name = "checkTimestamp")
            boolean checkTimestamp
    );

    /**
     * Send a mailing to a single recipient. Mainly used for (un)subscribe confirmations etc.
     * 		Of emails sent through this function, no statistics will be registered.
     * 		Do not use this function to send many emails to many different recipients!
     * 		Required credentials: access to area 'Send mailing'
     * 		@param login: DMdelivery login object.
     * 		@param campaignID: The database ID of the campaign to work with.
     * 		@param mailingID: The database ID of the mailing to send.
     * 		@param recipientID: The database ID of the recipient to send to. Can be found via getRecipientsByMatch.
     * 		@returns: true
     * 		
     */
    @WebResult(name = "sendSingleMailing_result", targetNamespace = "http://dmdelivery.com/webservice/", partName = "sendSingleMailing_result")
    @WebMethod(action = "urn:DMdeliveryAction")
    public boolean sendSingleMailing(
            @WebParam(partName = "login", name = "login")
            DMdeliveryLoginType login,
            @WebParam(partName = "campaignID", name = "campaignID")
            int campaignID,
            @WebParam(partName = "mailingID", name = "mailingID")
            int mailingID,
            @WebParam(partName = "recipientID", name = "recipientID")
            int recipientID
    );
}
