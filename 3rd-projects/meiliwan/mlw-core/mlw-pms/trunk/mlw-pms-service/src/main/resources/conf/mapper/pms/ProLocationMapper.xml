<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.meiliwan.emall.pms.dao.ProLocationDao" >
    <resultMap id="BaseResultMap" type="com.meiliwan.emall.pms.bean.ProLocation" >
        <id column="location_id" property="locationId" jdbcType="INTEGER" />
        <result column="bar_code" property="barCode" jdbcType="VARCHAR" />
        <result column="location_name" property="locationName" jdbcType="VARCHAR" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="pro_name" property="proName" jdbcType="VARCHAR" />
    </resultMap>
    <sql id="Base_Column_List" >
    location_id, bar_code, location_name, create_time, update_time
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from pro_location
        where location_id = #{locationId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from pro_location
    where location_id = #{locationId,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.meiliwan.emall.pms.bean.ProLocation" >
    insert into pro_location (location_id, bar_code, location_name, 
      create_time, update_time)
    values (#{locationId,jdbcType=INTEGER}, #{barCode,jdbcType=VARCHAR}, #{locationName,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="com.meiliwan.emall.pms.bean.ProLocation" >
        insert into pro_location
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="locationId != null" >
                location_id,
            </if>
            <if test="barCode != null" >
                bar_code,
            </if>
            <if test="locationName != null" >
                location_name,
            </if>
            <if test="createTime != null" >
                create_time,
            </if>
            <if test="updateTime != null" >
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="locationId != null" >
                #{locationId,jdbcType=INTEGER},
            </if>
            <if test="barCode != null" >
                #{barCode,jdbcType=VARCHAR},
            </if>
            <if test="locationName != null" >
                #{locationName,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null" >
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.meiliwan.emall.pms.bean.ProLocation" >
        update pro_location
        <set >
            <if test="barCode != null" >
                bar_code = #{barCode,jdbcType=VARCHAR},
            </if>
            <if test="locationName != null" >
                location_name = #{locationName,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where location_id = #{locationId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.meiliwan.emall.pms.bean.ProLocation" >
    update pro_location
    set bar_code = #{barCode,jdbcType=VARCHAR},
      location_name = #{locationName,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where location_id = #{locationId,jdbcType=INTEGER}
  </update>

    <!-- 下边是需要手动配置 自定义 查询条件 -->
    <sql id="selectCondition">
        <where>
            <trim suffixOverrides="and">
                <if test="entity != null">
                    <if test="entity.locationId != null">
                        and l.location_id = #{entity.locationId,jdbcType=INTEGER}
                    </if>
                    <if test="entity.locationName != null">
                        and l.location_name = #{entity.locationName,jdbcType=VARCHAR}
                    </if>
                    <if test="entity.barCode != null">
                        and l.bar_code = #{entity.barCode,jdbcType=VARCHAR}
                    </if>
                    <if test="entity.proName != null">
                        and p.pro_name like #{entity.proName,jdbcType=VARCHAR}
                    </if>
                </if>
            </trim>
            <trim suffixOverrides="and">
                <if test="whereSql!=null">
                    and ${whereSql}
                </if>
            </trim>
        </where>
    </sql>

    <!-- 根据条件查询 查简单商品字段列表 -->
    <select id="getListByEntityAndPageInfo" resultMap="BaseResultMap">
        select l.location_id, l.bar_code, l.location_name, l.update_time, p.pro_name
        from pro_location l left join pro_product p on l.bar_code = p.bar_code
        <include refid="selectCondition"/>
        <if test="orderBy!=null">
            ${orderBy}
        </if>
        <if test="pageInfo!=null">
            limit ${pageInfo.startIndex} ,${pageInfo.pagesize}
        </if>
    </select>

    <!-- 查询总数 -->
    <select id="getTotalByEntity"
            resultType="java.lang.Integer">
        select count(*) from pro_location l left join pro_product p on l.bar_code = p.bar_code
        <include refid="selectCondition"/>
    </select>

    <!-- 根据商品条形码查询商品对应的储位 -->
    <select id="getListByBarCode" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from pro_location
        where bar_code in
        <foreach item="item" collection="ids"
                 open="(" separator="," close=")">
            #{item,jdbcType=VARCHAR}
        </foreach>
    </select>

    <!-- 根据商品条形码修改商品对应的储位 -->
    <update id="updateLocationByBarcode">
        update pro_location
        set location_name = #{locationName,jdbcType=VARCHAR},update_time = #{updateTime,jdbcType=VARCHAR}
        where bar_code = #{id,jdbcType=VARCHAR}
    </update>

    <!-- 根据商品条形码获取商品对应的储位 -->
    <select id="getLocationByBarCode" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from pro_location
        where bar_code = #{id,jdbcType=VARCHAR}
    </select>

</mapper>