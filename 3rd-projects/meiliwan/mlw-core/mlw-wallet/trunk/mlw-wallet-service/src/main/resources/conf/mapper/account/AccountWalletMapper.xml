<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.meiliwan.emall.account.dao.AccountWalletDao" >
  <resultMap id="BaseResultMap" type="com.meiliwan.emall.account.bean.AccountWallet" >
    <id column="uid" property="uid" jdbcType="INTEGER" />
    <result column="mlw_coin" property="mlwCoin" jdbcType="DECIMAL" />
    <result column="freeze_amount" property="freezeAmount" jdbcType="DECIMAL" />
    <result column="pay_passwd" property="payPasswd" jdbcType="VARCHAR" />
    <result column="pay_time" property="payTime" jdbcType="TIMESTAMP" />
    <result column="charge_time" property="chargeTime" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    uid, mlw_coin,freeze_amount ,pay_passwd, pay_time, charge_time,state
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from account_wallet
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from account_wallet
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.meiliwan.emall.account.bean.AccountWallet" >
    insert into account_wallet (uid, mlw_coin,freeze_amount, pay_passwd,
      pay_time, charge_time,state)
    values (#{uid,jdbcType=INTEGER}, #{mlwCoin,jdbcType=DECIMAL}, #{freezeAmount,jdbcType=DECIMAL},#{payPasswd,jdbcType=VARCHAR},
      #{payTime,jdbcType=TIMESTAMP}, #{chargeTime,jdbcType=TIMESTAMP},#{state,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.meiliwan.emall.account.bean.AccountWallet" >
    insert into account_wallet
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        uid,
      </if>
      <if test="mlwCoin != null" >
        mlw_coin,
      </if>
      <if test="freezeAmount != null">
        freeze_amount,
      </if>
      <if test="payPasswd != null" >
        pay_passwd,
      </if>
      <if test="payTime != null" >
        pay_time,
      </if>
      <if test="chargeTime != null" >
        charge_time,
      </if>
      <if test="state != null" >
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="mlwCoin != null" >
        #{mlwCoin,jdbcType=DECIMAL},
      </if>
    <if test="freezeAmount != null">
        #{freezeAmount,jdbcType=DECIMAL},
    </if>
      <if test="payPasswd != null" >
        #{payPasswd,jdbcType=VARCHAR},
      </if>
      <if test="payTime != null" >
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="chargeTime != null" >
        #{chargeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null" >
        #{state,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.meiliwan.emall.account.bean.AccountWallet" >
    update account_wallet
    <set >
      <if test="mlwCoin != null" >
        mlw_coin = #{mlwCoin,jdbcType=DECIMAL},
      </if>
    <if test="freezeAmount != null">
        freeze_amount = #{freezeAmount,jdbcType=DECIMAL},
    </if>
      <if test="payPasswd != null" >
        pay_passwd = #{payPasswd,jdbcType=VARCHAR},
      </if>
      <if test="payTime != null" >
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="chargeTime != null" >
        charge_time = #{chargeTime,jdbcType=TIMESTAMP},
      </if>
       <if test="state != null" >
        state = #{state,jdbcType=TINYINT},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.meiliwan.emall.account.bean.AccountWallet" >
    update account_wallet
    set mlw_coin = #{mlwCoin,jdbcType=DECIMAL},
      freeze_amount = #{freezeAmount,jdbcType=DECIMAL},
      pay_passwd = #{payPasswd,jdbcType=VARCHAR},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      charge_time = #{chargeTime,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=TINYINT}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  
   <sql id="selectCondition">
        <where>
            <trim suffixOverrides="and">
                <if test="entity != null">
                   
                </if>
            </trim>
            <trim suffixOverrides="and">
                <if test="whereSql!=null">
                    and ${whereSql}
                </if>
            </trim>
        </where>
    </sql>

    <!-- 根据条件查询 -->
    <select id="getListByEntityAndPageInfo"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from account_wallet
        <include refid="selectCondition" />
        <if test="orderBy!=null">
            ${orderBy}
        </if>
        <if test="pageInfo!=null">
            limit ${pageInfo.startIndex} ,${pageInfo.pagesize}
        </if>
    </select>

    <!-- 查询总数 -->
    <select id="getTotalByEntity"
            resultType="java.lang.Integer">
        select count(*) from account_wallet
        <include refid="selectCondition" />
    </select>

    <!-- 冻结余额 语句-->
    <update id="freezeMoney" parameterType="com.meiliwan.emall.account.bean.AccountWallet">
        update account_wallet set mlw_coin=mlw_coin-${money},freeze_amount=freeze_amount+${money} where uid = ${uid} and mlw_coin >= ${money}
    </update>

    <!--冻结回退 语句-->
    <update id="rollBackFromFreeze" parameterType="com.meiliwan.emall.account.bean.AccountWallet">
        update account_wallet set mlw_coin=mlw_coin+${money},freeze_amount=freeze_amount-${money} where uid= ${uid} and freeze_amount >= ${money}
    </update>

</mapper>